#!/usr/bin/env python
#
# This script is used to analyse the log files generated by the routers.
#
# Usage: router_log_analyzer.py log_files
#
# Liang Wang @ Dept. of Computer Science, University of Helsinki, Finland
# 2012.04.09 created
#

import re
import os
import sys
from multiprocessing import *

START_TIME = 0
SCALE_FACTOR = 30

def parse_log(ifn):
    req = 0
    rsp = 0
    hit = 0
    arr = []

    pattern = re.compile(r"(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+)")

    for line in open(ifn,'r'):
        d = parse_line(line, pattern)
        if d is None:
            continue

        ti = int(float(d['ts']) - START_TIME) / SCALE_FACTOR
        if ti > 24 * 7 - 1:
            continue
        arr.append( (ti, int(d['src']), int(d['dst'])) )

    return ifn, arr


def parse_line(line, pattern):
    d = None
    m = pattern.search(line)
    try:
        if m:
            d = {}
            m = m.groups()
            d['ts']  = float(m[0])
            d['seq'] = int(m[1])
            d['src'] = m[2]
            d['dst'] = m[3]
            d['typ'] = m[4]
            d['hit'] = int(m[5])
            d['cid'] = m[6]
    except Exception, err:
        d = None
        #print "Exception:parse_line():", err
        pass
    return d

def parse_all(ifns):
    p = Pool(processes=cpu_count())
    it =p.imap(parse_log, ifns)
    while True:
        try:
            ifn, arr = it.next()
            output_log(ifn, arr)
            print "processed", ifn, '...'
        except StopIteration:
            break
    pass

def output_log(ifn, arr):
    ofh = open('traffic-' + ifn, 'w')
    for i in xrange(len(arr)):
        ti, src, dst = arr[i]
        ofh.write('%i\t%i\t%i\n' % (ti+1, src, dst))
    ofh.close()
    pass

def find_start_time():
    logs = os.listdir('.')
    tsa = []
    for log in logs:
        if log.startswith('client-'):
            try:
                line = open(log, 'r').next()
                m = re.search(r'(\S+)', line)
                if m is not None:
                    tsa.append(int(float(m.groups()[0])))
            except Exception, err:
                print 'Exception:find_start_time()', err
    return min(tsa)

if __name__=="__main__":
    START_TIME = find_start_time()
    print "start_time:%i, processing logs ..." % START_TIME
    parse_all(sys.argv[1:])
    sys.exit(0)
